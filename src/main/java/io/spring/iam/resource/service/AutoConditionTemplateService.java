package io.spring.iam.resource.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.spring.iam.aiam.operations.AINativeIAMOperations;
import io.spring.iam.domain.dto.AutoGeneratedTemplate;
import io.spring.iam.domain.entity.ConditionTemplate;
import io.spring.iam.domain.entity.ManagedResource;
import io.spring.iam.repository.ConditionTemplateRepository;
import io.spring.iam.repository.ManagedResourceRepository;
import io.spring.iam.repository.PermissionRepository;
import io.spring.iam.resource.MethodPatternAnalyzer;
import io.spring.iam.resource.MethodPatternAnalyzer.MethodAnalysisResult;
import io.spring.redis.RedisEventPublisher;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * 🔧 자동 조건 템플릿 생성 서비스 (순환 의존성 @Lazy로 해결)
 * 
 * ✅ 해결 방법:
 * - AINativeIAMOperations에 @Lazy 어노테이션 적용
 * - 실제 사용 시점에 빈 초기화
 * - 이벤트 기반 복잡성 제거
 */
@Service
@Slf4j
public class AutoConditionTemplateService {

    private final ConditionTemplateRepository conditionTemplateRepository;
    private final MethodPatternAnalyzer methodPatternAnalyzer;
    private final PermissionRepository permissionRepository;
    private final ManagedResourceRepository managedResourceRepository;
    private final AINativeIAMOperations aiNativeIAMOperations;
    private final ObjectMapper objectMapper;
    private final RedisEventPublisher eventPublisher;

    public AutoConditionTemplateService(ConditionTemplateRepository conditionTemplateRepository,
                                      MethodPatternAnalyzer methodPatternAnalyzer,
                                      PermissionRepository permissionRepository,
                                      ManagedResourceRepository managedResourceRepository,
                                      @Lazy AINativeIAMOperations aiNativeIAMOperations,
                                      ObjectMapper objectMapper,
                                      RedisEventPublisher eventPublisher) {
        this.conditionTemplateRepository = conditionTemplateRepository;
        this.methodPatternAnalyzer = methodPatternAnalyzer;
        this.permissionRepository = permissionRepository;
        this.managedResourceRepository = managedResourceRepository;
        this.aiNativeIAMOperations = aiNativeIAMOperations;
        this.objectMapper = objectMapper;
        this.eventPublisher = eventPublisher;
    }

    /**
     * 메서드 시그니처 정보를 담는 클래스
     */
    public static class MethodSignature {
        public final String methodName;
        public final String parameterInfo;
        public final String resourceType;
        
        public MethodSignature(String methodName, String parameterInfo, String resourceType) {
            this.methodName = methodName;
            this.parameterInfo = parameterInfo;
            this.resourceType = resourceType;
        }
    }

    /**
     * 메서드 분석 결과를 바탕으로 조건 템플릿을 자동 생성합니다.
     */
    @Transactional
    public List<ConditionTemplate> generateTemplatesFromAnalysis(List<MethodAnalysisResult> analysisResults) {
        log.info("🔄 자동 조건 템플릿 생성 시작: {} 개 분석 결과", analysisResults.size());

        List<ConditionTemplate> generatedTemplates = new ArrayList<>();

        // 1. 범용 조건 템플릿 생성 (한 번만)
        List<ConditionTemplate> universalTemplates = generateUniversalTemplates();
        generatedTemplates.addAll(universalTemplates);

        // 2. 메서드별 특화 템플릿 생성
        for (MethodAnalysisResult analysis : analysisResults) {
            List<ConditionTemplate> methodTemplates = generateMethodSpecificTemplates(analysis);
            generatedTemplates.addAll(methodTemplates);
        }

        // 3. 중복 제거 및 DB 저장
        List<ConditionTemplate> savedTemplates = saveDedupedTemplates(generatedTemplates);

        log.info("✅ 자동 조건 템플릿 생성 완료: {} 개 템플릿 저장", savedTemplates.size());
        return savedTemplates;
    }

    /**
     * 범용 조건 템플릿들을 생성합니다. (hasPermission 방식)
     */
    private List<ConditionTemplate> generateUniversalTemplates() {
        log.info("🌐 범용 조건 템플릿 생성 시작");

        List<AutoGeneratedTemplate> universalTemplates = Arrays.asList(
            new AutoGeneratedTemplate(
                "범용 권한 확인",
                "사용자가 특정 권한을 가지고 있는지 확인",
                "hasPermission(authentication, #targetObject, 'READ')",
                "universal",
                null,
                true
            ),
            new AutoGeneratedTemplate(
                "범용 소유자 확인", 
                "현재 사용자가 대상 객체의 소유자인지 확인",
                "#targetObject.owner == authentication.name",
                "universal",
                null,
                true
            ),
            new AutoGeneratedTemplate(
                "범용 관리자 권한",
                "현재 사용자가 관리자 권한을 가지고 있는지 확인", 
                "hasRole('ADMIN') or hasRole('SUPER_ADMIN')",
                "universal",
                null,
                true
            ),
            new AutoGeneratedTemplate(
                "범용 업무시간 제한",
                "업무 시간(09:00-18:00) 내에서만 접근 허용",
                "#isBusinessHours()",
                "universal", 
                null,
                true
            ),
            new AutoGeneratedTemplate(
                "범용 IP 제한",
                "사내 IP 대역에서만 접근 허용",
                "#isInternalIP(request.remoteAddr)",
                "universal",
                null,
                true
            )
        );

        return universalTemplates.stream()
            .map(this::convertToConditionTemplate)
            .collect(Collectors.toList());
    }

    /**
     * 메서드별 특화 조건 템플릿을 생성합니다.
     */
    private List<ConditionTemplate> generateMethodSpecificTemplates(MethodAnalysisResult analysis) {
        log.debug("🔧 메서드 특화 템플릿 생성: {}", analysis.getMethodName());

        List<AutoGeneratedTemplate> templates = new ArrayList<>();

        // 1. 메서드 패턴별 템플릿 생성
        String returnType = analysis.getReturnType().getSimpleName();
        if (returnType.contains("List") || returnType.contains("Collection")) {
            // 컬렉션 반환 메서드
            templates.add(createCollectionAccessTemplate(analysis));
        } else if (hasIdParameter(analysis)) {
            // ID 파라미터가 있는 메서드
            templates.add(createIdBasedAccessTemplate(analysis)); 
        } else {
            // 일반 메서드
            templates.add(createGeneralAccessTemplate(analysis));
        }

        // 2. AI 기반 추가 템플릿 생성 (필요시)
        try {
            List<AutoGeneratedTemplate> aiTemplates = generateAITemplates(analysis);
            templates.addAll(aiTemplates);
        } catch (Exception e) {
            log.warn("⚠️ AI 템플릿 생성 실패: {} - {}", analysis.getMethodName(), e.getMessage());
        }

        return templates.stream()
            .map(this::convertToConditionTemplate)
            .collect(Collectors.toList());
    }

    /**
     * AI 기반 템플릿 생성 (간단화)
     */
    private List<AutoGeneratedTemplate> generateAITemplates(MethodAnalysisResult analysis) {
        // 간단한 AI 요청으로 대체
        return Collections.emptyList(); // 현재는 빈 리스트 반환
    }

    /**
     * ID 파라미터 존재 여부 확인
     */
    private boolean hasIdParameter(MethodAnalysisResult analysis) {
        return analysis.getParameters().stream()
            .anyMatch(param -> param.getName().toLowerCase().contains("id"));
    }

    /**
     * ManagedResource를 기반으로 조건 템플릿을 생성합니다.
     */
    public List<ConditionTemplate> generateConditionTemplates() {
        log.info("🔄 ManagedResource 기반 조건 템플릿 자동 생성 시작");

        List<ManagedResource> resources = managedResourceRepository.findAll();
        if (resources.isEmpty()) {
            log.warn("⚠️ ManagedResource가 없어서 조건 템플릿 생성을 건너뜁니다");
            return Collections.emptyList();
        }

        log.info("📊 {}개의 ManagedResource를 기반으로 조건 템플릿 생성", resources.size());

        List<ConditionTemplate> allTemplates = new ArrayList<>();

        // 1. 범용 조건 템플릿 (한 번만)
        List<ConditionTemplate> universalTemplates = generateUniversalTemplates();
        allTemplates.addAll(universalTemplates);

        // 2. 리소스별 특화 템플릿
        for (ManagedResource resource : resources) {
            List<ConditionTemplate> resourceTemplates = generateResourceSpecificTemplates(resource);
            allTemplates.addAll(resourceTemplates);
        }

        // 3. 중복 제거 및 저장
        List<ConditionTemplate> savedTemplates = saveDedupedTemplates(allTemplates);

        log.info("✅ 조건 템플릿 자동 생성 완료: {}개 템플릿 저장", savedTemplates.size());
        return savedTemplates;
    }

    /**
     * 리소스별 특화 조건 템플릿을 생성합니다.
     */
    private List<ConditionTemplate> generateResourceSpecificTemplates(ManagedResource resource) {
        List<AutoGeneratedTemplate> templates = new ArrayList<>();

        String resourceId = resource.getResourceIdentifier();
        String friendlyName = resource.getFriendlyName();

        // 1. 읽기 권한 템플릿
        templates.add(new AutoGeneratedTemplate(
            String.format("%s 읽기 권한", friendlyName),
            String.format("%s 리소스에 대한 읽기 권한 확인", friendlyName),
            String.format("hasPermission(authentication, '%s', 'READ')", resourceId),
            "resource_read",
            resourceId,
            false
        ));

        // 2. 쓰기 권한 템플릿  
        templates.add(new AutoGeneratedTemplate(
            String.format("%s 쓰기 권한", friendlyName),
            String.format("%s 리소스에 대한 쓰기 권한 확인", friendlyName),
            String.format("hasPermission(authentication, '%s', 'WRITE')", resourceId),
            "resource_write", 
            resourceId,
            false
        ));

        // 3. 관리자 권한 템플릿
        templates.add(new AutoGeneratedTemplate(
            String.format("%s 관리자 권한", friendlyName),
            String.format("%s 리소스에 대한 관리자 권한 확인", friendlyName),
            String.format("hasPermission(authentication, '%s', 'ADMIN') or hasRole('ADMIN')", resourceId),
            "resource_admin",
            resourceId,
            false
        ));

        return templates.stream()
            .map(this::convertToConditionTemplate)
            .collect(Collectors.toList());
    }

    private ConditionTemplate convertToConditionTemplate(AutoGeneratedTemplate template) {
        ConditionTemplate entity = new ConditionTemplate();
        entity.setName(template.getName());
        entity.setDescription(template.getDescription());
        entity.setSpelTemplate(template.getSpelTemplate());
        entity.setIsAutoGenerated(true);
        entity.setTemplateType(template.getTemplateType());
        entity.setSourceMethod(template.getSourceMethod());
        entity.setIsUniversal(template.isUniversal());
        entity.setCreatedAt(LocalDateTime.now());
        entity.setUpdatedAt(LocalDateTime.now());

        // 🔄 2단계: 자동 생성 템플릿의 분류 결정
        if (template.isUniversal()) {
            // 범용 조건
            entity.setClassification(ConditionTemplate.ConditionClassification.UNIVERSAL);
            entity.setRiskLevel(ConditionTemplate.RiskLevel.LOW);
            entity.setComplexityScore(1);
            entity.setApprovalRequired(false);
            entity.setContextDependent(false);
        } else {
            // 특화 조건
            entity.setClassification(ConditionTemplate.ConditionClassification.UNIVERSAL); // 임시로 UNIVERSAL 사용
            entity.setRiskLevel(ConditionTemplate.RiskLevel.MEDIUM);
            entity.setComplexityScore(3);
            entity.setApprovalRequired(true);
            entity.setContextDependent(true);
        }

        // 카테고리 설정
        if (template.getTemplateType().contains("universal")) {
            entity.setCategory("범용");
        } else if (template.getTemplateType().contains("resource")) {
            entity.setCategory("리소스별");
        } else {
            entity.setCategory("메서드별");
        }

        return entity;
    }

    private AutoGeneratedTemplate createCollectionAccessTemplate(MethodAnalysisResult analysis) {
        return new AutoGeneratedTemplate(
            String.format("%s 컬렉션 접근", analysis.getMethodName()),
            String.format("%s 메서드의 컬렉션 결과에 대한 접근 권한", analysis.getMethodName()),
            String.format("hasPermission(authentication, '%s', 'READ')", analysis.getMethodName()),
            "collection_access",
            analysis.getMethodName(),
            false
        );
    }

    private AutoGeneratedTemplate createIdBasedAccessTemplate(MethodAnalysisResult analysis) {
        return new AutoGeneratedTemplate(
            String.format("%s ID 기반 접근", analysis.getMethodName()),
            String.format("%s 메서드의 ID 파라미터 기반 접근 권한", analysis.getMethodName()),
            String.format("hasPermission(authentication, #id, 'READ') or #id == authentication.name", analysis.getMethodName()),
            "id_parameter",
            analysis.getMethodName(),
            false
        );
    }

    private AutoGeneratedTemplate createGeneralAccessTemplate(MethodAnalysisResult analysis) {
        return new AutoGeneratedTemplate(
            String.format("%s 일반 접근", analysis.getMethodName()),
            String.format("%s 메서드에 대한 일반 접근 권한", analysis.getMethodName()),
            String.format("hasPermission(authentication, '%s', 'EXECUTE')", analysis.getMethodName()),
            "general_access",
            analysis.getMethodName(),
            false
        );
    }

    private List<ConditionTemplate> saveDedupedTemplates(List<ConditionTemplate> templates) {
        // 이름 기반 중복 제거
        Map<String, ConditionTemplate> uniqueTemplates = templates.stream()
            .collect(Collectors.toMap(
                ConditionTemplate::getName,
                template -> template,
                (existing, replacement) -> existing // 기존 것을 유지
            ));

        List<ConditionTemplate> savedTemplates = conditionTemplateRepository.saveAll(uniqueTemplates.values());
        log.info("📊 중복 제거 후 저장: 원본 {}개 → 저장 {}개", templates.size(), savedTemplates.size());

        return savedTemplates;
    }
}