package io.spring.identityadmin.admin.studio.service.impl;

import io.spring.identityadmin.domain.entity.policy.Policy;
import io.spring.identityadmin.security.xacml.pap.dto.SimulationContext;
import io.spring.identityadmin.security.xacml.pap.service.PolicyBuilderService;
import io.spring.identityadmin.admin.studio.dto.InitiateGrantRequestDto;
import io.spring.identityadmin.admin.studio.dto.SimulationRequestDto;
import io.spring.identityadmin.admin.studio.dto.SimulationResultDto;
import io.spring.identityadmin.admin.studio.service.StudioActionService;
import io.spring.identityadmin.admin.workflow.wizard.dto.WizardContext;
import io.spring.identityadmin.admin.workflow.wizard.service.PermissionWizardService; // 의존성 추가
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

/**
 * [수정됨]
 * 사유: 과업 내용에 따라 Studio의 '권한 관리' 액션을 실제 동작하도록 구현합니다.
 *      기존의 Mock 로직을 제거하고, PermissionWizardService를 호출하여
 *      멤버십 관리 워크플로우(마법사)를 시작시키는 역할을 수행합니다.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class StudioActionServiceImpl implements StudioActionService {

    private final PolicyBuilderService policyBuilderService;
    private final PermissionWizardService permissionWizardService; // 의존성 주입
    private final ModelMapper modelMapper;

    /**
     * 정책 시뮬레이션 실행 (기존 로직 유지)
     */
    @Override
    public SimulationResultDto runPolicySimulation(SimulationRequestDto simulationRequest) {
        log.info("Running policy simulation for action: {}", simulationRequest.actionType());
        Policy policyDraft = modelMapper.map(simulationRequest.policyDraft(), Policy.class);
        SimulationContext simulationContext = new SimulationContext(null, null, null);
        return policyBuilderService.simulatePolicy(policyDraft, simulationContext);
    }

    /**
     * [핵심 구현] 멤버십 관리 마법사 워크플로우 시작
     * Studio에서 전달받은 주체 정보를 기반으로 정책 이름과 설명을 자동 생성하고,
     * PermissionWizardService에 작업을 위임하여 마법사를 시작합니다.
     */
    @Override
    public WizardContext initiateGrantWorkflow(InitiateGrantRequestDto grantRequest) {
        log.info("Initiating membership management workflow from Studio for users: {}, groups: {}.",
                grantRequest.getUserIds(), grantRequest.getGroupIds());

        // 정책 이름과 설명을 자동으로 생성
        String autoGeneratedName = "Studio-Membership-Mgmt-" + System.currentTimeMillis();
        String autoGeneratedDesc = String.format("Authorization Studio에서 시작된 멤버십 관리 작업입니다.");

        // PermissionWizardService의 beginCreation 메서드를 호출하여 워크플로우를 시작
        return permissionWizardService.beginCreation(grantRequest, autoGeneratedName, autoGeneratedDesc);
    }
}