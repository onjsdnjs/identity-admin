package io.spring.identityadmin.repository;

import io.spring.identityadmin.domain.entity.ConditionTemplate;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Repository
public interface ConditionTemplateRepository extends JpaRepository<ConditionTemplate, Long> {
    
    /**
     * 자동 생성된 템플릿들을 조회
     */
    List<ConditionTemplate> findByIsAutoGenerated(Boolean isAutoGenerated);
    
    /**
     * 범용 조건 템플릿들을 조회
     */
    List<ConditionTemplate> findByIsUniversal(Boolean isUniversal);
    
    /**
     * 템플릿 타입별로 조회
     */
    List<ConditionTemplate> findByTemplateType(String templateType);
    
    /**
     * 특정 소스 메서드로 생성된 템플릿들을 조회
     */
    List<ConditionTemplate> findBySourceMethod(String sourceMethod);
    
    /**
     * 자동 생성된 템플릿들을 모두 삭제
     */
    @Modifying
    @Transactional
    @Query("DELETE FROM ConditionTemplate ct WHERE ct.isAutoGenerated = :isAutoGenerated")
    void deleteByIsAutoGenerated(@Param("isAutoGenerated") Boolean isAutoGenerated);
    
    /**
     * 특정 소스 메서드로 생성된 템플릿들을 삭제
     */
    @Modifying
    @Transactional
    @Query("DELETE FROM ConditionTemplate ct WHERE ct.sourceMethod = :sourceMethod")
    void deleteBySourceMethod(@Param("sourceMethod") String sourceMethod);
    
    /**
     * 카테고리별로 조회
     */
    List<ConditionTemplate> findByCategory(String category);
    
    /**
     * 자동 생성된 범용 조건들만 조회
     */
    @Query("SELECT ct FROM ConditionTemplate ct WHERE ct.isAutoGenerated = true AND ct.isUniversal = true")
    List<ConditionTemplate> findAutoGeneratedUniversalTemplates();
    
    /**
     * 특정 엔티티 타입에 적용 가능한 템플릿들 조회
     */
    @Query("SELECT ct FROM ConditionTemplate ct WHERE ct.isUniversal = true OR ct.templateType LIKE %:entityType%")
    List<ConditionTemplate> findApplicableTemplatesForEntity(@Param("entityType") String entityType);
}
